generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model admins {
  id           String    @id @default(uuid())
  username     String    @unique
  password     String
  nome         String
  email        String?
  ativo        Boolean   @default(true)
  ultimoAcesso DateTime?
  permissoes   String?
  criadoEm     DateTime  @default(now())
  atualizadoEm DateTime @updatedAt
}

model pedidos_musica {
  id                  String      @id @default(uuid())
  locacaoId           String?     // ID da locação (null = instância principal)
  nomeCliente         String?
  musicaTitulo        String
  musicaYoutubeId     String
  musicaThumbnail     String?
  musicaDuracao       Int?
  status              String      @default("pendente")
  valor               Float
  pagamentoId         String?     @unique
  pagamentoCarrinhoId String?
  posicaoFila         Int?
  motivoRejeicao      String?
  moderadoPor         String?
  prioridade          Boolean     @default(false)
  dedicatoria         String?
  dedicatoriaDe       String?
  criadoEm            DateTime    @default(now())
  atualizadoEm        DateTime    @updatedAt
  gift_cards          gift_cards?
  pagamentos          pagamentos? @relation(fields: [pagamentoId], references: [id])
  locacao             locacoes?   @relation(fields: [locacaoId], references: [id])

  @@index([locacaoId])
  @@index([criadoEm])
  @@index([status])
  @@index([prioridade])
}

model pagamentos {
  id                      String          @id @default(uuid())
  mercadoPagoPaymentId    String?         @unique
  mercadoPagoPreferenceId String?         @unique
  status                  String          @default("pending")
  valor                   Float
  metodoPagamento         String?
  emailPagador            String?
  cpfPagador              String?
  nomePagador             String?
  qrCode                  String?
  qrCodeText              String?
  pixExpirationDate       DateTime?
  webhookData             String?
  lastWebhookUpdate       DateTime?
  criadoEm                DateTime        @default(now())
  atualizadoEm            DateTime        @updatedAt
  pedidos_musica          pedidos_musica?

  @@index([status])
}

model configuracoes {
  id           String   @id @default(uuid())
  chave        String   @unique
  valor        String
  descricao    String?
  tipo         String   @default("text")
  criadoEm     DateTime @default(now())
  atualizadoEm DateTime @updatedAt
}

model estado_player {
  id                String   @id @default(uuid())
  musicaAtualId     String?
  status            String   @default("stopped")
  tempoAtual        Float    @default(0)
  volume            Int      @default(80)
  ultimaAtualizacao DateTime @default(now())
  criadoEm          DateTime @default(now())
  atualizadoEm      DateTime @updatedAt
}

model gift_cards {
  id                String          @id @default(uuid())
  locacaoId         String?         // ID da locação (null = instância principal)
  codigo            String          @unique
  valor             Float
  quantidadeMusicas Int
  usado             Boolean         @default(false)
  ativo             Boolean         @default(true)
  dataExpiracao     DateTime?
  usadoEm           DateTime?
  usadoPor          String?
  pedidoMusicaId    String?         @unique
  observacao        String?
  criadoEm          DateTime        @default(now())
  atualizadoEm      DateTime        @updatedAt
  pedidos_musica    pedidos_musica? @relation(fields: [pedidoMusicaId], references: [id])
  locacao           locacoes?       @relation(fields: [locacaoId], references: [id])

  @@index([locacaoId])
  @@index([codigo])
}

model carrinhos {
  id              String    @id @default(uuid())
  locacaoId       String?   // ID da locação (null = instância principal)
  sessionId       String
  nomeCliente     String?
  musicasTitulos  String
  musicasIds      String
  musicasThumbs   String
  musicasDuracoes String
  valorTotal      Float
  quantidadeItens Int
  expiraEm        DateTime
  criadoEm        DateTime  @default(now())
  atualizadoEm    DateTime  @updatedAt
  locacao         locacoes? @relation(fields: [locacaoId], references: [id])

  @@index([locacaoId])
  @@index([expiraEm])
  @@index([sessionId])
}

model sugestoes {
  id           String   @id @default(uuid())
  categoria    String
  titulo       String
  youtubeId    String?
  thumbnail    String?
  tipo         String   @default("trending")
  ordem        Int      @default(0)
  ativo        Boolean  @default(true)
  criadoEm     DateTime @default(now())
  atualizadoEm DateTime @updatedAt

  @@index([categoria, ativo])
}

model historico_buscas {
  id           String   @id @default(uuid())
  termo        String
  categoria    String?
  resultados   Int      @default(0)
  vezesBuscado Int      @default(1)
  criadoEm     DateTime @default(now())
  atualizadoEm DateTime @updatedAt

  @@index([termo])
}

model palavras_proibidas {
  id           String   @id @default(uuid())
  palavra      String
  categoria    String   @default("AMBOS")
  severidade   String   @default("MEDIA")
  ativo        Boolean  @default(true)
  criadoEm     DateTime @default(now())
  atualizadoEm DateTime @updatedAt

  @@index([categoria])
}

model rate_limits {
  id           String   @id @default(uuid())
  ip           String
  contador     Int      @default(1)
  resetaEm     DateTime
  criadoEm     DateTime @default(now())
  atualizadoEm DateTime @updatedAt

  @@index([resetaEm])
  @@index([ip])
}

model historico_musicas {
  id               String    @id @default(uuid())
  pedidoMusicaId   String?   // Referência ao pedido original (se existir)
  musicaTitulo     String
  musicaYoutubeId  String
  musicaThumbnail  String?
  musicaDuracao    Int?      // Duração em segundos
  nomeCliente      String?
  valor            Float     @default(0)
  inicioReproducao DateTime  @default(now())
  fimReproducao    DateTime? // Quando a música terminou
  duracaoTocada    Int?      // Tempo efetivamente tocado em segundos
  tipo             String    @default("cliente") // cliente, ambiente, admin
  observacao       String?
  criadoEm         DateTime  @default(now())

  @@index([inicioReproducao])
  @@index([tipo])
  @@map("historico_musicas")
}

model locacoes {
  id                     String          @id @default(uuid())
  slug                   String          @unique // URL do cliente (ex: casamento-joao-maria) - /l/:slug
  slugPainelTV           String          @unique // URL do painel TV/Admin (ex: painel-casamento-123) - /painel/:slugPainelTV
  nomeCliente            String          // Nome do contratante
  nomeEvento             String          // Nome do evento/estabelecimento
  emailContato           String?
  telefoneContato        String?

  // Período de locação
  dataInicio             DateTime
  dataFim                DateTime
  ativo                  Boolean         @default(true)

  // Customizações
  nomeEstabelecimento    String?         // Nome exibido na tela de descanso
  logoUrl                String?         // Logo personalizada
  corTema                String?         // Cor do tema (#hexadecimal)
  mensagemBoasVindas     String?         // Mensagem customizada
  backgroundImageUrl     String?         // Imagem de fundo customizada
  videoDescansoUrl       String?         // Vídeo customizado de tela de descanso

  // QR Code único da locação
  qrCodeData             String?         // Dados do QR Code (URL da locação)

  // Configurações isoladas (JSON com override de configs)
  configuracoes          String?         // JSON com configs específicas

  // Estatísticas
  totalPedidos           Int             @default(0)
  totalArrecadado        Float           @default(0)

  // Observações internas
  observacoes            String?

  criadoEm               DateTime        @default(now())
  atualizadoEm           DateTime        @updatedAt

  // Relações
  pedidos_musica         pedidos_musica[]
  gift_cards             gift_cards[]
  carrinhos              carrinhos[]
  historico_musicas      historico_musicas_locacao[]

  @@index([slug])
  @@index([ativo])
  @@index([dataInicio, dataFim])
}

model historico_musicas_locacao {
  id               String    @id @default(uuid())
  locacaoId        String?
  pedidoMusicaId   String?
  musicaTitulo     String
  musicaYoutubeId  String
  musicaThumbnail  String?
  musicaDuracao    Int?
  nomeCliente      String?
  valor            Float     @default(0)
  inicioReproducao DateTime  @default(now())
  fimReproducao    DateTime?
  duracaoTocada    Int?
  tipo             String    @default("cliente")
  observacao       String?
  criadoEm         DateTime  @default(now())

  locacao          locacoes? @relation(fields: [locacaoId], references: [id])

  @@index([locacaoId])
  @@index([inicioReproducao])
  @@index([tipo])
}