const musicaService = require('../services/musicaService');
const playerService = require('../services/playerService');

/**
 * üîå CONFIGURA√á√ÉO DE WEBSOCKET
 *
 * Sistema centralizado de eventos WebSocket.
 * Uma √∫nica conex√£o, organizada e eficiente.
 *
 * Eventos dispon√≠veis:
 * - request:estado-inicial - Cliente solicita estado completo ao conectar
 * - request:fila - Cliente solicita atualiza√ß√£o da fila
 * - request:musica-atual - Cliente solicita m√∫sica atual
 * - musica:terminou - TV notifica que m√∫sica terminou
 * - pedido:pago - Cliente notifica pagamento aprovado
 *
 * Emiss√µes do servidor:
 * - estado:inicial - Estado completo (fila + m√∫sica atual)
 * - fila:atualizada - Fila atualizada
 * - fila:vazia - Fila ficou vazia
 * - musica:atual - M√∫sica que est√° tocando
 * - player:iniciar - Iniciar reprodu√ß√£o
 * - player:pausar - Pausar reprodu√ß√£o
 * - player:retomar - Retomar reprodu√ß√£o
 * - player:parar - Parar reprodu√ß√£o
 * - config:atualizada - Configura√ß√£o alterada
 * - pedido:pago - Confirma√ß√£o de pagamento
 */
function setupSocketHandlers(io) {
  // Inicializar playerService com io
  playerService.inicializar(io);

  console.log('üîå [WEBSOCKET] Configurando handlers...');

  io.on('connection', (socket) => {
    console.log(`‚úÖ [WEBSOCKET] Cliente conectado: ${socket.id}`);
    console.log(`üìä [WEBSOCKET] Total de clientes: ${io.engine.clientsCount}`);
    console.log(`üîß [WEBSOCKET] Transport: ${socket.conn.transport.name}`);

    // ========== REQUESTS DO CLIENTE ==========

    // Envia estado completo ao conectar
    socket.on('request:estado-inicial', async () => {
      try {
        const musicaAtual = await musicaService.buscarMusicaAtual();
        const fila = await musicaService.buscarFilaMusicas();

        socket.emit('estado:inicial', {
          musicaAtual,
          fila,
        });
      } catch (error) {
        console.error('Erro ao enviar estado inicial:', error);
        socket.emit('error', { message: 'Erro ao carregar estado inicial' });
      }
    });

    // Cliente solicita atualiza√ß√£o da fila
    socket.on('request:fila', async () => {
      try {
        const fila = await musicaService.buscarFilaMusicas();
        socket.emit('fila:atualizada', fila);
      } catch (error) {
        console.error('Erro ao enviar fila:', error);
        socket.emit('error', { message: 'Erro ao carregar fila' });
      }
    });

    // Cliente solicita m√∫sica atual
    socket.on('request:musica-atual', async () => {
      try {
        const musicaAtual = await musicaService.buscarMusicaAtual();
        socket.emit('musica:atual', musicaAtual);
      } catch (error) {
        console.error('Erro ao enviar m√∫sica atual:', error);
        socket.emit('error', { message: 'Erro ao carregar m√∫sica atual' });
      }
    });

    // Painel TV notifica que m√∫sica terminou
    socket.on('musica:terminou', async (data) => {
      try {
        console.log('üéµ M√∫sica terminou:', data);

        // Usar o playerService para gerenciar a transi√ß√£o
        await playerService.musicaTerminou();

        // Atualizar fila para todos os clientes
        const fila = await musicaService.buscarFilaMusicas();
        io.emit('fila:atualizada', fila);
      } catch (error) {
        console.error('Erro ao processar t√©rmino da m√∫sica:', error);
        socket.emit('error', { message: 'Erro ao processar t√©rmino da m√∫sica' });
      }
    });

    // Cliente pagou m√∫sica
    socket.on('pedido:pago', async (data) => {
      try {
        console.log('üí∞ Pedido pago:', data);

        // Buscar estado atualizado
        const fila = await musicaService.buscarFilaMusicas();

        // Notificar todos os clientes
        io.emit('fila:atualizada', fila);

        // Se n√£o houver m√∫sica tocando, iniciar esta usando o playerService
        const estadoPlayer = playerService.obterEstado();
        if (!estadoPlayer.musicaAtual) {
          const pedido = await musicaService.tocarMusica(data.pedidoId);
          playerService.iniciarMusica(pedido);
        }
      } catch (error) {
        console.error('Erro ao processar pedido pago:', error);
      }
    });

    // ========== DESCONEX√ÉO ==========

    socket.on('disconnect', (reason) => {
      console.log(`‚ùå [WEBSOCKET] Cliente desconectado: ${socket.id}`);
      console.log(`üìã [WEBSOCKET] Raz√£o: ${reason}`);
      console.log(`üìä [WEBSOCKET] Total de clientes: ${io.engine.clientsCount}`);
    });

    socket.on('error', (error) => {
      console.error(`‚ùå [WEBSOCKET] Erro no socket ${socket.id}:`, error);
    });
  });

  console.log('‚úÖ [WEBSOCKET] Handlers configurados com sucesso');
  console.log('üìã [WEBSOCKET] Eventos registrados:');
  console.log('   - request:estado-inicial');
  console.log('   - request:fila');
  console.log('   - request:musica-atual');
  console.log('   - musica:terminou');
  console.log('   - pedido:pago');
}

module.exports = { setupSocketHandlers };
