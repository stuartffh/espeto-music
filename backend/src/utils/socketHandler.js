const musicaService = require('../services/musicaService');
const playerService = require('../services/playerService');
const remoteControlService = require('../services/remoteControlService');

/**
 * üîå CONFIGURA√á√ÉO DE WEBSOCKET
 *
 * Sistema centralizado de eventos WebSocket.
 * Uma √∫nica conex√£o, organizada e eficiente.
 *
 * Eventos dispon√≠veis:
 * - request:estado-inicial - Cliente solicita estado completo ao conectar
 * - request:fila - Cliente solicita atualiza√ß√£o da fila
 * - request:musica-atual - Cliente solicita m√∫sica atual
 * - musica:terminou - TV notifica que m√∫sica terminou
 * - pedido:pago - Cliente notifica pagamento aprovado
 * - remote-control-auth - Autentica√ß√£o para controle remoto
 * - remote-control-command - Comando de controle remoto
 *
 * Emiss√µes do servidor:
 * - estado:inicial - Estado completo (fila + m√∫sica atual)
 * - fila:atualizada - Fila atualizada
 * - fila:vazia - Fila ficou vazia
 * - musica:atual - M√∫sica que est√° tocando
 * - player:iniciar - Iniciar reprodu√ß√£o
 * - player:pausar - Pausar reprodu√ß√£o
 * - player:retomar - Retomar reprodu√ß√£o
 * - player:parar - Parar reprodu√ß√£o
 * - config:atualizada - Configura√ß√£o alterada
 * - pedido:pago - Confirma√ß√£o de pagamento
 * - remote-control - Comando para o player
 * - remote-control-response - ACK/NACK de comandos
 * - server:reload-required - Servidor reiniciou, cliente deve recarregar
 */

// Timestamp de quando o servidor iniciou (para detectar reinicializa√ß√µes)
const SERVER_START_TIME = Date.now();

function setupSocketHandlers(io) {
  // Inicializar servi√ßos com io
  playerService.inicializar(io);
  remoteControlService.initialize(io);

  console.log('üîå [WEBSOCKET] Configurando handlers...');

  io.on('connection', (socket) => {
    console.log(`‚úÖ [WEBSOCKET] Cliente conectado: ${socket.id}`);
    console.log(`üìä [WEBSOCKET] Total de clientes: ${io.engine.clientsCount}`);
    console.log(`üîß [WEBSOCKET] Transport: ${socket.conn.transport.name}`);

    // üîÑ DETECTAR RECONEX√ÉO AP√ìS REINICIALIZA√á√ÉO
    // Verificar se o cliente est√° se reconectando (handshake com serverStartTime antigo)
    const clientServerStartTime = socket.handshake.query.serverStartTime;

    if (clientServerStartTime && parseInt(clientServerStartTime) !== SERVER_START_TIME) {
      console.log('üîÑ [WEBSOCKET] Cliente reconectou ap√≥s reinicializa√ß√£o do servidor!');
      console.log(`   Cliente conhecia: ${clientServerStartTime}`);
      console.log(`   Servidor atual: ${SERVER_START_TIME}`);
      console.log(`   üîÉ Enviando comando de reload...`);

      // Emitir evento para for√ßar reload da p√°gina
      socket.emit('server:reload-required', {
        oldStartTime: parseInt(clientServerStartTime),
        newStartTime: SERVER_START_TIME,
        message: 'Servidor foi reiniciado, recarregando p√°gina...'
      });

      return; // N√£o processar eventos deste cliente, ele vai recarregar
    }

    // ========== REQUESTS DO CLIENTE ==========

    // Envia estado completo ao conectar
    socket.on('request:estado-inicial', async (data) => {
      try {
        // üîÑ DETECTAR REINICIALIZA√á√ÉO DO SERVIDOR
        // Se o cliente enviar o serverStartTime anterior e for diferente do atual,
        // significa que o servidor reiniciou
        if (data && data.clientServerStartTime && data.clientServerStartTime !== SERVER_START_TIME) {
          console.log('üîÑ [WEBSOCKET] Servidor reiniciou! Cliente precisa recarregar.');
          console.log(`   Cliente conhecia: ${data.clientServerStartTime}`);
          console.log(`   Servidor atual: ${SERVER_START_TIME}`);

          // Emitir evento para for√ßar reload da p√°gina
          socket.emit('server:reload-required', {
            oldStartTime: data.clientServerStartTime,
            newStartTime: SERVER_START_TIME,
            message: 'Servidor foi reiniciado, recarregando p√°gina...'
          });

          return; // N√£o enviar estado inicial, cliente vai recarregar
        }

        const musicaAtual = await musicaService.buscarMusicaAtual();
        const fila = await musicaService.buscarFilaMusicas();

        socket.emit('estado:inicial', {
          musicaAtual,
          fila,
          serverStartTime: SERVER_START_TIME, // Enviar timestamp do servidor
        });
      } catch (error) {
        console.error('Erro ao enviar estado inicial:', error);
        socket.emit('error', { message: 'Erro ao carregar estado inicial' });
      }
    });

    // Cliente solicita atualiza√ß√£o da fila
    socket.on('request:fila', async () => {
      try {
        const fila = await musicaService.buscarFilaMusicas();
        socket.emit('fila:atualizada', fila);
      } catch (error) {
        console.error('Erro ao enviar fila:', error);
        socket.emit('error', { message: 'Erro ao carregar fila' });
      }
    });

    // Cliente solicita m√∫sica atual
    socket.on('request:musica-atual', async () => {
      try {
        const musicaAtual = await musicaService.buscarMusicaAtual();
        socket.emit('musica:atual', musicaAtual);
      } catch (error) {
        console.error('Erro ao enviar m√∫sica atual:', error);
        socket.emit('error', { message: 'Erro ao carregar m√∫sica atual' });
      }
    });

    // Painel TV notifica que m√∫sica terminou
    socket.on('musica:terminou', async (data) => {
      try {
        console.log('üéµ M√∫sica terminou:', data);

        // Usar o playerService para gerenciar a transi√ß√£o
        await playerService.musicaTerminou();

        // Atualizar fila para todos os clientes
        const fila = await musicaService.buscarFilaMusicas();
        io.emit('fila:atualizada', fila);
      } catch (error) {
        console.error('Erro ao processar t√©rmino da m√∫sica:', error);
        socket.emit('error', { message: 'Erro ao processar t√©rmino da m√∫sica' });
      }
    });

    // Cliente pagou m√∫sica
    socket.on('pedido:pago', async (data) => {
      try {
        console.log('üí∞ [SOCKET] Pedido pago recebido:', data);

        // Buscar estado atualizado
        const fila = await musicaService.buscarFilaMusicas();

        // Notificar todos os clientes
        io.emit('fila:atualizada', fila);
        console.log('üì° [SOCKET] Fila atualizada emitida');

        // üéØ GARANTIR AUTOPLAY - Fun√ß√£o centralizada e robusta
        console.log('üíö [SOCKET] Garantindo autoplay...');
        try {
          const musicaIniciada = await playerService.garantirAutoplay();

          if (musicaIniciada) {
            console.log('‚úÖ [SOCKET] Autoplay garantido! M√∫sica:', musicaIniciada.musicaTitulo);
          } else {
            console.log('‚ÑπÔ∏è  [SOCKET] Autoplay n√£o necess√°rio (j√° est√° tocando ou fila vazia)');
          }
        } catch (error) {
          console.error('‚ùå [SOCKET] Erro ao garantir autoplay:', error.message);
        }
      } catch (error) {
        console.error('‚ùå [SOCKET] Erro ao processar pedido pago:', error);
      }
    });

    // TV envia atualiza√ß√£o de tempo do player (YouTube)
    socket.on('player:tempo-sync', (data) => {
      try {
        if (typeof data.tempo === 'number' && data.tempo >= 0) {
          playerService.atualizarTempoAtual(data.tempo);
        }
      } catch (error) {
        console.error('Erro ao sincronizar tempo do player:', error);
      }
    });

    // ========== CONTROLE REMOTO ==========

    // Autentica√ß√£o para controle remoto
    socket.on('remote-control-auth', async (credentials) => {
      try {
        const result = await remoteControlService.authenticate(socket, credentials);

        if (result.success) {
          socket.emit('remote-control-auth-response', {
            success: true,
            sessionId: result.sessionId,
            role: result.role
          });
        } else {
          socket.emit('remote-control-auth-response', {
            success: false,
            reason: result.reason
          });
        }
      } catch (error) {
        console.error('Erro na autentica√ß√£o de controle remoto:', error);
        socket.emit('remote-control-auth-response', {
          success: false,
          reason: 'Erro interno'
        });
      }
    });

    // Comando de controle remoto
    socket.on('remote-control-command', async (command) => {
      try {
        remoteControlService.updateActivity(socket.id);
        await remoteControlService.processCommand(socket, command);
      } catch (error) {
        console.error('Erro ao processar comando de controle remoto:', error);
      }
    });

    // Resposta do heartbeat
    socket.on('heartbeat-response', () => {
      remoteControlService.updateActivity(socket.id);
    });

    // Resposta do player para comandos (repassar para o servi√ßo de controle remoto)
    socket.on('player-command-response', (data) => {
      // Emitir globalmente para o remoteControlService capturar
      io.emit('player-response', data);
    });

    // ========== DESCONEX√ÉO ==========

    socket.on('disconnect', (reason) => {
      console.log(`‚ùå [WEBSOCKET] Cliente desconectado: ${socket.id}`);
      console.log(`üìã [WEBSOCKET] Raz√£o: ${reason}`);
      console.log(`üìä [WEBSOCKET] Total de clientes: ${io.engine.clientsCount}`);

      // Remover do controle remoto
      remoteControlService.removeClient(socket.id);
    });

    socket.on('error', (error) => {
      console.error(`‚ùå [WEBSOCKET] Erro no socket ${socket.id}:`, error);
    });
  });

  console.log('‚úÖ [WEBSOCKET] Handlers configurados com sucesso');
  console.log('üìã [WEBSOCKET] Eventos registrados:');
  console.log('   - request:estado-inicial');
  console.log('   - request:fila');
  console.log('   - request:musica-atual');
  console.log('   - musica:terminou');
  console.log('   - pedido:pago');
}

module.exports = { setupSocketHandlers };
