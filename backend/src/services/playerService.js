/**
 * Player Service - Controle centralizado do player com backup em banco de dados
 *
 * Features:
 * - Estado global sincronizado com banco de dados
 * - Recupera√ß√£o autom√°tica ap√≥s crash
 * - Auto-corre√ß√£o de inconsist√™ncias
 * - Backup cont√≠nuo do tempo de reprodu√ß√£o
 * - MULTI-TENANT: Um estado independente por estabelecimento
 */

const prisma = require('../config/database');

// ========================================
// MULTI-TENANT: Map de estados por estabelecimento
// ========================================
// Estrutura: Map<estabelecimentoId, EstadoPlayer>
const estadosMemoria = new Map();

// Estrutura de intervalos por estabelecimento
const intervalosSync = new Map();
const intervalosBackup = new Map();
const intervalosAutoplay = new Map();

let io = null;

/**
 * Obt√©m ou cria estado em mem√≥ria para um estabelecimento
 */
function obterEstadoMemoria(estabelecimentoId) {
  if (!estabelecimentoId) {
    throw new Error('estabelecimentoId √© obrigat√≥rio');
  }

  if (!estadosMemoria.has(estabelecimentoId)) {
    estadosMemoria.set(estabelecimentoId, {
      musicaAtual: null,
      status: 'stopped',
      tempoAtual: 0,
      volume: 80,
      ultimaAtualizacao: Date.now(),
    });
  }

  return estadosMemoria.get(estabelecimentoId);
}

/**
 * Inicializa o player service e recupera estado do banco
 * MULTI-TENANT: Recupera estados de TODOS os estabelecimentos ativos
 */
async function inicializar(socketIo) {
  io = socketIo;

  console.log('üéÆ Player Service: Inicializando (Multi-Tenant)...');

  // Recuperar estados de todos os estabelecimentos
  await recuperarTodosEstados();

  console.log('‚úÖ Player Service inicializado');
}

/**
 * Recupera estados de TODOS os estabelecimentos ativos
 */
async function recuperarTodosEstados() {
  try {
    console.log('üîÑ Recuperando estados de todos os estabelecimentos...');

    // Buscar todos os estabelecimentos ativos
    const estabelecimentos = await prisma.estabelecimento.findMany({
      where: { ativo: true },
      select: { id: true, nome: true }
    });

    console.log(`üìç Encontrados ${estabelecimentos.length} estabelecimentos ativos`);

    // Recuperar estado de cada um
    for (const estab of estabelecimentos) {
      await recuperarEstado(estab.id);
    }

  } catch (error) {
    console.error('‚ùå Erro ao recuperar estados:', error);
  }
}

/**
 * Recupera o estado salvo no banco para um estabelecimento espec√≠fico
 * MULTI-TENANT: Agora recebe estabelecimentoId
 */
async function recuperarEstado(estabelecimentoId) {
  try {
    console.log(`üîÑ Recuperando estado do estabelecimento ${estabelecimentoId}...`);

    // Buscar estado salvo
    let estadoSalvo = await prisma.estadoPlayer.findUnique({
      where: { estabelecimentoId }
    });

    // Se n√£o existe, criar registro inicial
    if (!estadoSalvo) {
      console.log('üìù Criando registro inicial de estado...');
      estadoSalvo = await prisma.estadoPlayer.create({
        data: {
          estabelecimentoId,
          status: 'stopped',
          tempoAtual: 0,
          volume: 80,
        }
      });
    }

    const estadoMemoria = obterEstadoMemoria(estabelecimentoId);

    // Se tinha m√∫sica tocando, recuperar
    if (estadoSalvo.musicaAtualId) {
      const musicaAtual = await prisma.pedidoMusica.findUnique({
        where: { id: estadoSalvo.musicaAtualId }
      });

      if (musicaAtual && musicaAtual.status === 'tocando') {
        console.log('üéµ Recuperando m√∫sica:', musicaAtual.musicaTitulo);
        console.log('‚è±Ô∏è  Tempo salvo:', Math.floor(estadoSalvo.tempoAtual), 'segundos');

        estadoMemoria.musicaAtual = musicaAtual;
        estadoMemoria.status = estadoSalvo.status;
        estadoMemoria.tempoAtual = estadoSalvo.tempoAtual;
        estadoMemoria.volume = estadoSalvo.volume;
        estadoMemoria.ultimaAtualizacao = Date.now();

        // Se estava tocando, retomar
        if (estadoSalvo.status === 'playing') {
          console.log('‚ñ∂Ô∏è Retomando reprodu√ß√£o automaticamente...');
          iniciarSincronizacao(estabelecimentoId);
          iniciarBackup(estabelecimentoId);
          iniciarVerificadorAutoplay(estabelecimentoId);

          // Emitir evento para TVs do estabelecimento retomarem
          if (io) {
            io.to(`estabelecimento:${estabelecimentoId}`).emit('player:iniciar', {
              musica: musicaAtual,
              estado: estadoMemoria,
            });
          }
        }
      } else {
        console.log('‚ö†Ô∏è  M√∫sica salva n√£o encontrada ou inconsistente, limpando estado...');
        await limparEstado(estabelecimentoId);
      }
    } else {
      console.log('‚ÑπÔ∏è  Nenhuma m√∫sica em reprodu√ß√£o');
      estadoMemoria.volume = estadoSalvo.volume;
      // Iniciar autoplay mesmo sem m√∫sica tocando
      iniciarVerificadorAutoplay(estabelecimentoId);
    }

  } catch (error) {
    console.error('‚ùå Erro ao recuperar estado:', error);
  }
}

/**
 * Salva o estado atual no banco de dados
 * MULTI-TENANT: Salva estado de um estabelecimento espec√≠fico
 */
async function salvarEstado(estabelecimentoId) {
  if (!estabelecimentoId) {
    throw new Error('estabelecimentoId √© obrigat√≥rio');
  }

  try {
    const estadoMemoria = obterEstadoMemoria(estabelecimentoId);

    await prisma.estadoPlayer.upsert({
      where: { estabelecimentoId },
      update: {
        musicaAtualId: estadoMemoria.musicaAtual?.id || null,
        status: estadoMemoria.status,
        tempoAtual: estadoMemoria.tempoAtual,
        volume: estadoMemoria.volume,
        ultimaAtualizacao: new Date(),
      },
      create: {
        estabelecimentoId,
        musicaAtualId: estadoMemoria.musicaAtual?.id || null,
        status: estadoMemoria.status,
        tempoAtual: estadoMemoria.tempoAtual,
        volume: estadoMemoria.volume,
      }
    });
  } catch (error) {
    console.error('‚ùå Erro ao salvar estado:', error);
  }
}

/**
 * Limpa o estado do banco
 * MULTI-TENANT: Limpa estado de um estabelecimento espec√≠fico
 */
async function limparEstado(estabelecimentoId) {
  if (!estabelecimentoId) {
    throw new Error('estabelecimentoId √© obrigat√≥rio');
  }

  await prisma.estadoPlayer.update({
    where: { estabelecimentoId },
    data: {
      musicaAtualId: null,
      status: 'stopped',
      tempoAtual: 0,
    }
  });

  const estadoMemoria = obterEstadoMemoria(estabelecimentoId);
  estadoMemoria.musicaAtual = null;
  estadoMemoria.status = 'stopped';
  estadoMemoria.tempoAtual = 0;
}

/**
 * Inicia backup peri√≥dico do estado (a cada 3 segundos)
 * MULTI-TENANT: Um intervalo por estabelecimento
 */
function iniciarBackup(estabelecimentoId) {
  if (!estabelecimentoId) {
    throw new Error('estabelecimentoId √© obrigat√≥rio');
  }

  pararBackup(estabelecimentoId);

  const interval = setInterval(async () => {
    await salvarEstado(estabelecimentoId);
  }, 3000); // Backup a cada 3 segundos

  intervalosBackup.set(estabelecimentoId, interval);
}

/**
 * Para backup peri√≥dico
 * MULTI-TENANT: Para backup de um estabelecimento espec√≠fico
 */
function pararBackup(estabelecimentoId) {
  if (!estabelecimentoId) {
    throw new Error('estabelecimentoId √© obrigat√≥rio');
  }

  const interval = intervalosBackup.get(estabelecimentoId);
  if (interval) {
    clearInterval(interval);
    intervalosBackup.delete(estabelecimentoId);
  }
}

/**
 * Inicia uma nova m√∫sica
 * MULTI-TENANT: Requer estabelecimentoId
 */
async function iniciarMusica(musica, estabelecimentoId) {
  if (!estabelecimentoId) {
    throw new Error('estabelecimentoId √© obrigat√≥rio');
  }

  console.log('‚ñ∂Ô∏è Player: Iniciando m√∫sica', musica.musicaTitulo, 'no estabelecimento', estabelecimentoId);

  const estadoMemoria = obterEstadoMemoria(estabelecimentoId);
  const volumeAtual = estadoMemoria.volume;

  estadoMemoria.musicaAtual = musica;
  estadoMemoria.status = 'playing';
  estadoMemoria.tempoAtual = 0;
  estadoMemoria.volume = volumeAtual;
  estadoMemoria.ultimaAtualizacao = Date.now();

  // Salvar no banco imediatamente
  await salvarEstado(estabelecimentoId);

  // Iniciar sincroniza√ß√£o e backup
  iniciarSincronizacao(estabelecimentoId);
  iniciarBackup(estabelecimentoId);

  // Emitir evento WebSocket apenas para estabelecimento espec√≠fico
  if (io) {
    io.to(`estabelecimento:${estabelecimentoId}`).emit('player:iniciar', {
      musica,
      estado: estadoMemoria,
    });
  }

  return { ...estadoMemoria };
}

/**
 * Pausa a m√∫sica
 * MULTI-TENANT: Requer estabelecimentoId
 */
async function pausar(estabelecimentoId) {
  if (!estabelecimentoId) {
    throw new Error('estabelecimentoId √© obrigat√≥rio');
  }

  const estadoMemoria = obterEstadoMemoria(estabelecimentoId);

  if (estadoMemoria.status === 'playing') {
    console.log('‚è∏Ô∏è Player: Pausando no estabelecimento', estabelecimentoId);
    estadoMemoria.status = 'paused';
    estadoMemoria.ultimaAtualizacao = Date.now();

    await salvarEstado(estabelecimentoId);
    pararSincronizacao(estabelecimentoId);
    // Manter backup para salvar estado pausado

    if (io) {
      io.to(`estabelecimento:${estabelecimentoId}`).emit('player:pausar', { estado: estadoMemoria });
    }
  }
  return { ...estadoMemoria };
}

/**
 * Retoma a m√∫sica pausada
 * MULTI-TENANT: Requer estabelecimentoId
 */
async function retomar(estabelecimentoId) {
  if (!estabelecimentoId) {
    throw new Error('estabelecimentoId √© obrigat√≥rio');
  }

  const estadoMemoria = obterEstadoMemoria(estabelecimentoId);

  if (estadoMemoria.status === 'paused') {
    console.log('‚ñ∂Ô∏è Player: Retomando no estabelecimento', estabelecimentoId);
    estadoMemoria.status = 'playing';
    estadoMemoria.ultimaAtualizacao = Date.now();

    await salvarEstado(estabelecimentoId);
    iniciarSincronizacao(estabelecimentoId);

    if (io) {
      io.to(`estabelecimento:${estabelecimentoId}`).emit('player:retomar', { estado: estadoMemoria });
    }
  }
  return { ...estadoMemoria };
}

/**
 * Para completamente
 * MULTI-TENANT: Requer estabelecimentoId
 */
async function parar(estabelecimentoId) {
  if (!estabelecimentoId) {
    throw new Error('estabelecimentoId √© obrigat√≥rio');
  }

  console.log('‚èπÔ∏è Player: Parando no estabelecimento', estabelecimentoId);

  pararSincronizacao(estabelecimentoId);
  pararBackup(estabelecimentoId);

  const estadoMemoria = obterEstadoMemoria(estabelecimentoId);
  const volumeAtual = estadoMemoria.volume;

  estadoMemoria.musicaAtual = null;
  estadoMemoria.status = 'stopped';
  estadoMemoria.tempoAtual = 0;
  estadoMemoria.volume = volumeAtual;
  estadoMemoria.ultimaAtualizacao = Date.now();

  await salvarEstado(estabelecimentoId);

  if (io) {
    io.to(`estabelecimento:${estabelecimentoId}`).emit('player:parar', { estado: estadoMemoria });
  }

  return { ...estadoMemoria };
}

/**
 * Pula para a pr√≥xima m√∫sica
 * MULTI-TENANT: Requer estabelecimentoId
 */
async function pularMusica(estabelecimentoId) {
  if (!estabelecimentoId) {
    throw new Error('estabelecimentoId √© obrigat√≥rio');
  }

  console.log('‚è≠Ô∏è Player: Pulando m√∫sica no estabelecimento', estabelecimentoId);

  const musicaService = require('./musicaService');
  const estadoMemoria = obterEstadoMemoria(estabelecimentoId);

  if (estadoMemoria.musicaAtual) {
    const proximaMusica = await musicaService.pularMusica(estadoMemoria.musicaAtual.id, estabelecimentoId);

    pararSincronizacao(estabelecimentoId);
    pararBackup(estabelecimentoId);

    if (proximaMusica) {
      return await iniciarMusica(proximaMusica, estabelecimentoId);
    } else {
      return await parar(estabelecimentoId);
    }
  }

  return { ...estadoMemoria };
}

/**
 * Chamado quando a m√∫sica termina naturalmente
 * MULTI-TENANT: Requer estabelecimentoId
 */
async function musicaTerminou(estabelecimentoId) {
  if (!estabelecimentoId) {
    throw new Error('estabelecimentoId √© obrigat√≥rio');
  }

  console.log('üéµ Player: M√∫sica terminou no estabelecimento', estabelecimentoId);

  const musicaService = require('./musicaService');
  const estadoMemoria = obterEstadoMemoria(estabelecimentoId);

  if (estadoMemoria.musicaAtual) {
    const proximaMusica = await musicaService.concluirMusica(estadoMemoria.musicaAtual.id, estabelecimentoId);

    pararSincronizacao(estabelecimentoId);
    pararBackup(estabelecimentoId);

    if (proximaMusica) {
      return await iniciarMusica(proximaMusica, estabelecimentoId);
    } else {
      return await parar(estabelecimentoId);
    }
  }

  return { ...estadoMemoria };
}

/**
 * Ajusta o volume
 * MULTI-TENANT: Requer estabelecimentoId
 */
async function ajustarVolume(nivel, estabelecimentoId) {
  if (!estabelecimentoId) {
    throw new Error('estabelecimentoId √© obrigat√≥rio');
  }

  console.log('üîä Player: Volume ajustado para', nivel, 'no estabelecimento', estabelecimentoId);

  const estadoMemoria = obterEstadoMemoria(estabelecimentoId);
  estadoMemoria.volume = nivel;

  await salvarEstado(estabelecimentoId);

  if (io) {
    io.to(`estabelecimento:${estabelecimentoId}`).emit('player:volume', { volume: nivel });
  }

  return { ...estadoMemoria };
}

/**
 * Busca para um tempo espec√≠fico
 * MULTI-TENANT: Requer estabelecimentoId
 */
async function buscarTempo(tempo, estabelecimentoId) {
  if (!estabelecimentoId) {
    throw new Error('estabelecimentoId √© obrigat√≥rio');
  }

  console.log('‚è© Player: Buscando para', tempo, 'segundos no estabelecimento', estabelecimentoId);

  const estadoMemoria = obterEstadoMemoria(estabelecimentoId);
  estadoMemoria.tempoAtual = tempo;
  estadoMemoria.ultimaAtualizacao = Date.now();

  await salvarEstado(estabelecimentoId);

  if (io) {
    io.to(`estabelecimento:${estabelecimentoId}`).emit('player:buscar', { tempo });
  }

  return { ...estadoMemoria };
}

/**
 * Retorna o estado atual
 * MULTI-TENANT: Requer estabelecimentoId
 */
function obterEstado(estabelecimentoId) {
  if (!estabelecimentoId) {
    throw new Error('estabelecimentoId √© obrigat√≥rio');
  }

  const estadoMemoria = obterEstadoMemoria(estabelecimentoId);
  return { ...estadoMemoria };
}

/**
 * Sincroniza√ß√£o de tempo (a cada segundo)
 * MULTI-TENANT: Um intervalo por estabelecimento
 */
function iniciarSincronizacao(estabelecimentoId) {
  if (!estabelecimentoId) {
    throw new Error('estabelecimentoId √© obrigat√≥rio');
  }

  pararSincronizacao(estabelecimentoId);

  const interval = setInterval(() => {
    const estadoMemoria = obterEstadoMemoria(estabelecimentoId);

    if (estadoMemoria.status === 'playing') {
      const agora = Date.now();
      const deltaSegundos = (agora - estadoMemoria.ultimaAtualizacao) / 1000;
      estadoMemoria.tempoAtual += deltaSegundos;
      estadoMemoria.ultimaAtualizacao = agora;

      // Emitir sync a cada 5 segundos
      if (Math.floor(estadoMemoria.tempoAtual) % 5 === 0) {
        if (io) {
          io.to(`estabelecimento:${estabelecimentoId}`).emit('player:sync', {
            tempo: estadoMemoria.tempoAtual,
            status: estadoMemoria.status,
          });
        }
      }
    }
  }, 1000);

  intervalosSync.set(estabelecimentoId, interval);
}

/**
 * Para sincroniza√ß√£o
 * MULTI-TENANT: Para sincroniza√ß√£o de um estabelecimento espec√≠fico
 */
function pararSincronizacao(estabelecimentoId) {
  if (!estabelecimentoId) {
    throw new Error('estabelecimentoId √© obrigat√≥rio');
  }

  const interval = intervalosSync.get(estabelecimentoId);
  if (interval) {
    clearInterval(interval);
    intervalosSync.delete(estabelecimentoId);
  }
}

/**
 * Inicia verificador peri√≥dico de autoplay
 * Verifica a cada 10 segundos se h√° m√∫sicas na fila e player parado
 * MULTI-TENANT: Um intervalo por estabelecimento
 */
function iniciarVerificadorAutoplay(estabelecimentoId) {
  if (!estabelecimentoId) {
    throw new Error('estabelecimentoId √© obrigat√≥rio');
  }

  pararVerificadorAutoplay(estabelecimentoId);

  console.log('üîÑ Iniciando verificador de autoplay para estabelecimento', estabelecimentoId);

  const interval = setInterval(async () => {
    try {
      // üéØ Usar fun√ß√£o centralizada de autoplay
      await garantirAutoplay(estabelecimentoId);
    } catch (error) {
      console.error('‚ùå Erro no verificador de autoplay:', error);
    }
  }, 10000); // A cada 10 segundos

  intervalosAutoplay.set(estabelecimentoId, interval);
}

/**
 * Para verificador de autoplay
 * MULTI-TENANT: Para autoplay de um estabelecimento espec√≠fico
 */
function pararVerificadorAutoplay(estabelecimentoId) {
  if (!estabelecimentoId) {
    throw new Error('estabelecimentoId √© obrigat√≥rio');
  }

  const interval = intervalosAutoplay.get(estabelecimentoId);
  if (interval) {
    clearInterval(interval);
    intervalosAutoplay.delete(estabelecimentoId);
  }
}

/**
 * üéØ GARANTIR AUTOPLAY - Fun√ß√£o centralizada e robusta
 *
 * Esta fun√ß√£o SEMPRE garante que uma m√∫sica seja iniciada se:
 * 1. N√£o h√° m√∫sica tocando atualmente
 * 2. Existe m√∫sica "pago" aguardando na fila
 *
 * Deve ser chamada em TODOS os pontos onde m√∫sicas podem entrar na fila:
 * - Ap√≥s criar pedido em modo gratuito
 * - Ap√≥s webhook aprovar pagamento
 * - Ap√≥s socket receber evento de pagamento
 * - No verificador peri√≥dico
 *
 * MULTI-TENANT: Requer estabelecimentoId
 * @returns {Promise<Object|null>} M√∫sica iniciada ou null
 */
async function garantirAutoplay(estabelecimentoId) {
  if (!estabelecimentoId) {
    throw new Error('estabelecimentoId √© obrigat√≥rio');
  }

  try {
    console.log('\nüéØ ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê');
    console.log(`   GARANTIR AUTOPLAY - Estabelecimento ${estabelecimentoId}`);
    console.log('   ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê');

    const estadoMemoria = obterEstadoMemoria(estabelecimentoId);

    // 1. Verificar estado atual do player em mem√≥ria
    console.log('1Ô∏è‚É£ Verificando estado do player em mem√≥ria...');
    console.log(`   - Status: ${estadoMemoria.status}`);
    console.log(`   - M√∫sica atual: ${estadoMemoria.musicaAtual?.musicaTitulo || 'Nenhuma'}`);
    console.log(`   - ID: ${estadoMemoria.musicaAtual?.id || 'N/A'}`);

    if (estadoMemoria.musicaAtual && estadoMemoria.status === 'playing') {
      console.log('‚úÖ J√° existe m√∫sica tocando, n√£o precisa iniciar nova');
      console.log('‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê\n');
      return null;
    }

    // 2. Verificar no banco se h√° m√∫sica com status "tocando"
    console.log('\n2Ô∏è‚É£ Verificando m√∫sica "tocando" no banco de dados...');
    const musicaService = require('./musicaService');
    const musicaTocandoBanco = await musicaService.buscarMusicaAtual(estabelecimentoId);

    if (musicaTocandoBanco) {
      console.log(`‚ö†Ô∏è  INCONSIST√äNCIA DETECTADA: M√∫sica no banco como "tocando" mas player parado`);
      console.log(`   - M√∫sica: ${musicaTocandoBanco.musicaTitulo}`);
      console.log(`   - ID: ${musicaTocandoBanco.id}`);
      console.log(`   - A√ß√£o: Iniciando esta m√∫sica no player...`);

      await iniciarMusica(musicaTocandoBanco, estabelecimentoId);
      console.log('‚úÖ M√∫sica inconsistente iniciada com sucesso');
      console.log('‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê\n');
      return musicaTocandoBanco;
    }

    // 3. Buscar primeira m√∫sica paga na fila
    console.log('\n3Ô∏è‚É£ Buscando primeira m√∫sica "pago" na fila...');
    const proximaMusica = await musicaService.iniciarProximaMusicaSeNecessario(estabelecimentoId);

    if (proximaMusica) {
      console.log(`üéµ M√∫sica encontrada e marcada como "tocando":`);
      console.log(`   - T√≠tulo: ${proximaMusica.musicaTitulo}`);
      console.log(`   - ID: ${proximaMusica.id}`);
      console.log(`   - Cliente: ${proximaMusica.nomeCliente || 'An√¥nimo'}`);
      console.log(`   - A√ß√£o: Iniciando no player...`);

      await iniciarMusica(proximaMusica, estabelecimentoId);
      console.log('‚úÖ AUTOPLAY BEM-SUCEDIDO! M√∫sica iniciada com sucesso');
      console.log('‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê\n');
      return proximaMusica;
    }

    // 4. Nenhuma m√∫sica para tocar
    console.log('\n‚ÑπÔ∏è  Nenhuma m√∫sica aguardando na fila');
    console.log('‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê\n');
    return null;

  } catch (error) {
    console.error('\n‚ùå ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê');
    console.error('   ERRO AO GARANTIR AUTOPLAY');
    console.error('   ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê');
    console.error('Tipo:', error.constructor.name);
    console.error('Mensagem:', error.message);
    console.error('Stack:', error.stack);
    console.error('‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê\n');
    return null;
  }
}

/**
 * Atualiza o tempo atual do player (chamado pela TV via WebSocket)
 * MULTI-TENANT: Requer estabelecimentoId
 */
function atualizarTempoAtual(tempo, estabelecimentoId) {
  if (!estabelecimentoId) {
    throw new Error('estabelecimentoId √© obrigat√≥rio');
  }

  const estadoMemoria = obterEstadoMemoria(estabelecimentoId);

  if (estadoMemoria.status === 'playing' && typeof tempo === 'number' && tempo >= 0) {
    estadoMemoria.tempoAtual = tempo;
    estadoMemoria.ultimaAtualizacao = Date.now();
  }
}

module.exports = {
  inicializar,
  iniciarMusica,
  pausar,
  retomar,
  parar,
  pularMusica,
  ajustarVolume,
  buscarTempo,
  obterEstado,
  musicaTerminou,
  garantirAutoplay, // ‚≠ê NOVA FUN√á√ÉO EXPORTADA
  atualizarTempoAtual, // ‚≠ê NOVA FUN√á√ÉO para sync de tempo
};
