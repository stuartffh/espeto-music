const { PrismaClient } = require('@prisma/client');
const prisma = new PrismaClient();
const { invalidarCache } = require('../utils/configHelper');

/**
 * GET /api/config
 * Lista todas as configura√ß√µes
 * MULTI-TENANT: Filtra por estabelecimentoId
 */
async function listar(req, res) {
  try {
    const estabelecimentoId = req.estabelecimentoId;

    if (!estabelecimentoId) {
      return res.status(400).json({
        erro: 'Estabelecimento n√£o identificado',
      });
    }

    const configs = await prisma.configuracao.findMany({
      where: { estabelecimentoId }, // ‚Üê Multi-tenant
      orderBy: { chave: 'asc' },
    });

    res.json(configs);
  } catch (error) {
    console.error('Erro ao listar configura√ß√µes:', error);
    res.status(500).json({
      erro: 'Erro ao listar configura√ß√µes',
    });
  }
}

/**
 * GET /api/config/:chave
 * Busca uma configura√ß√£o espec√≠fica
 * MULTI-TENANT: Filtra por estabelecimentoId
 */
async function buscar(req, res) {
  try {
    const { chave } = req.params;
    const estabelecimentoId = req.estabelecimentoId;

    if (!estabelecimentoId) {
      return res.status(400).json({
        erro: 'Estabelecimento n√£o identificado',
      });
    }

    const config = await prisma.configuracao.findFirst({
      where: {
        estabelecimentoId, // ‚Üê Multi-tenant
        chave,
      },
    });

    if (!config) {
      return res.status(404).json({
        erro: 'Configura√ß√£o n√£o encontrada',
      });
    }

    res.json(config);
  } catch (error) {
    console.error('Erro ao buscar configura√ß√£o:', error);
    res.status(500).json({
      erro: 'Erro ao buscar configura√ß√£o',
    });
  }
}

/**
 * PUT /api/config/:chave
 * Atualiza uma configura√ß√£o
 * MULTI-TENANT: Filtra por estabelecimentoId
 */
async function atualizar(req, res) {
  try {
    const { chave } = req.params;
    const { valor } = req.body;
    const estabelecimentoId = req.estabelecimentoId;

    if (!estabelecimentoId) {
      return res.status(400).json({
        erro: 'Estabelecimento n√£o identificado',
      });
    }

    if (valor === undefined) {
      return res.status(400).json({
        erro: 'Valor √© obrigat√≥rio',
      });
    }

    // Buscar config primeiro para validar que existe e pertence ao estabelecimento
    const configExistente = await prisma.configuracao.findFirst({
      where: {
        estabelecimentoId,
        chave,
      },
    });

    if (!configExistente) {
      return res.status(404).json({
        erro: 'Configura√ß√£o n√£o encontrada',
      });
    }

    const config = await prisma.configuracao.update({
      where: { id: configExistente.id },
      data: { valor: String(valor) },
    });

    // Invalidar cache da configura√ß√£o atualizada
    invalidarCache(chave);

    // Emitir evento WebSocket para atualizar configura√ß√µes em tempo real
    // ‚Üê MULTI-TENANT: Emitir apenas para o estabelecimento espec√≠fico
    const io = req.app.get('io');
    if (io) {
      console.log(`üîÑ Emitindo atualiza√ß√£o de configura√ß√£o: ${chave} = ${valor} para estabelecimento ${estabelecimentoId}`);
      io.to(`estabelecimento:${estabelecimentoId}`).emit('config:atualizada', { chave, valor: String(valor) });
    }

    res.json(config);
  } catch (error) {
    console.error('Erro ao atualizar configura√ß√£o:', error);
    res.status(500).json({
      erro: 'Erro ao atualizar configura√ß√£o',
    });
  }
}

/**
 * POST /api/config
 * Cria uma nova configura√ß√£o
 * MULTI-TENANT: Associa ao estabelecimentoId
 */
async function criar(req, res) {
  try {
    const { chave, valor, descricao, tipo } = req.body;
    const estabelecimentoId = req.estabelecimentoId;

    if (!estabelecimentoId) {
      return res.status(400).json({
        erro: 'Estabelecimento n√£o identificado',
      });
    }

    if (!chave || valor === undefined) {
      return res.status(400).json({
        erro: 'Chave e valor s√£o obrigat√≥rios',
      });
    }

    const config = await prisma.configuracao.create({
      data: {
        estabelecimentoId, // ‚Üê Multi-tenant
        chave,
        valor: String(valor),
        descricao,
        tipo: tipo || 'text',
      },
    });

    // Invalidar cache ao criar nova configura√ß√£o
    invalidarCache(chave);

    res.status(201).json(config);
  } catch (error) {
    console.error('Erro ao criar configura√ß√£o:', error);
    res.status(500).json({
      erro: 'Erro ao criar configura√ß√£o',
    });
  }
}

/**
 * DELETE /api/config/:chave
 * Remove uma configura√ß√£o
 * MULTI-TENANT: Filtra por estabelecimentoId
 */
async function remover(req, res) {
  try {
    const { chave } = req.params;
    const estabelecimentoId = req.estabelecimentoId;

    if (!estabelecimentoId) {
      return res.status(400).json({
        erro: 'Estabelecimento n√£o identificado',
      });
    }

    // Buscar config primeiro para validar que existe e pertence ao estabelecimento
    const configExistente = await prisma.configuracao.findFirst({
      where: {
        estabelecimentoId,
        chave,
      },
    });

    if (!configExistente) {
      return res.status(404).json({
        erro: 'Configura√ß√£o n√£o encontrada',
      });
    }

    await prisma.configuracao.delete({
      where: { id: configExistente.id },
    });

    // Invalidar cache ao remover configura√ß√£o
    invalidarCache(chave);

    res.json({
      mensagem: 'Configura√ß√£o removida com sucesso',
    });
  } catch (error) {
    console.error('Erro ao remover configura√ß√£o:', error);
    res.status(500).json({
      erro: 'Erro ao remover configura√ß√£o',
    });
  }
}

module.exports = {
  listar,
  buscar,
  atualizar,
  criar,
  remover,
};
