const musicaService = require('../services/musicaService');
const { buscarVideos, buscarDetalhesVideo } = require('../config/youtube');
const { registrarBusca } = require('../services/trendingService');
const downloadService = require('../services/downloadService');
const moderationService = require('../services/moderationService');

/**
 * Busca v√≠deos no YouTube
 */
async function buscar(req, res) {
  try {
    const { q, maxResults } = req.query;

    if (!q) {
      return res.status(400).json({ error: 'Par√¢metro de busca √© obrigat√≥rio' });
    }

    // Buscar configura√ß√µes
    const prisma = require('../config/database');
    const [configFiltro, configTempoMaximo] = await Promise.all([
      prisma.configuracoes.findUnique({ where: { chave: 'SEARCH_FILTER_KEYWORD' } }),
      prisma.configuracoes.findUnique({ where: { chave: 'TEMPO_MAXIMO_MUSICA' } })
    ]);

    // Aplicar filtro autom√°tico se configurado
    let queryFinal = q;
    if (configFiltro && configFiltro.valor && configFiltro.valor.trim()) {
      const keyword = configFiltro.valor.trim();
      // Adicionar keyword apenas se n√£o estiver j√° presente na busca
      if (!q.toLowerCase().includes(keyword.toLowerCase())) {
        queryFinal = `${q} ${keyword}`;
        console.log(`üîç Filtro aplicado: "${q}" ‚Üí "${queryFinal}"`);
      }
    }

    // Calcular dura√ß√£o m√°xima em segundos
    const tempoMaximoMinutos = configTempoMaximo ? parseInt(configTempoMaximo.valor) : 10;
    const maxDuration = tempoMaximoMinutos * 60; // Converter para segundos

    const videos = await buscarVideos(queryFinal, parseInt(maxResults) || 10, maxDuration);

    // Registrar busca no hist√≥rico (async, n√£o bloquear resposta)
    registrarBusca(q, null, videos.length).catch(err =>
      console.error('Erro ao registrar busca:', err)
    );

    res.json(videos);
  } catch (error) {
    console.error('Erro ao buscar m√∫sicas:', error);
    res.status(500).json({ error: error.message });
  }
}

/**
 * Busca detalhes de um v√≠deo espec√≠fico
 */
async function detalhes(req, res) {
  try {
    const { videoId } = req.params;
    const video = await buscarDetalhesVideo(videoId);
    res.json(video);
  } catch (error) {
    console.error('Erro ao buscar detalhes do v√≠deo:', error);
    res.status(500).json({ error: error.message });
  }
}

/**
 * Cria um novo pedido de m√∫sica
 */
async function criar(req, res) {
  try {
    const {
      nomeCliente,
      musicaTitulo,
      musicaYoutubeId,
      musicaThumbnail,
      musicaDuracao,
      prioridade,
      dedicatoria,
      dedicatoriaDe,
    } = req.body;

    // Valida√ß√µes
    if (!musicaTitulo || !musicaYoutubeId) {
      return res.status(400).json({
        error: 'T√≠tulo e ID do YouTube s√£o obrigat√≥rios',
      });
    }

    // Validar conte√∫do atrav√©s do sistema de modera√ß√£o
    const validacao = await moderationService.validarPedido({
      nomeCliente,
      musicaTitulo,
      dedicatoria,
      dedicatoriaDe,
    });

    if (!validacao.aprovado) {
      console.log('\nüö´ ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê');
      console.log('   PEDIDO REJEITADO PELA MODERA√á√ÉO');
      console.log('   ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê');
      console.log(`üìã Nome Cliente: "${nomeCliente}"`);
      console.log(`üéµ T√≠tulo M√∫sica: "${musicaTitulo}"`);
      console.log(`üíù Dedicat√≥ria: "${dedicatoria || 'N/A'}"`);
      console.log(`‚ùå Motivo: ${validacao.motivo}`);
      console.log(`üìç Campo bloqueado: ${validacao.campo}`);
      console.log(`üîç Palavras detectadas: ${validacao.palavrasEncontradas.map(p => `${p.palavra} (${p.severidade})`).join(', ')}`);
      console.log('‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê\n');

      return res.status(400).json({
        error: validacao.motivo,
      });
    }

    // Buscar configura√ß√µes
    const prisma = require('../config/database');
    const [configPreco, configModoGratuito, configTempoMaximo, configPrecoNormal, configPrecoPrioritaria] = await Promise.all([
      prisma.configuracoes.findUnique({ where: { chave: 'PRECO_MUSICA' } }),
      prisma.configuracoes.findUnique({ where: { chave: 'modo_gratuito' } }),
      prisma.configuracoes.findUnique({ where: { chave: 'TEMPO_MAXIMO_MUSICA' } }),
      prisma.configuracoes.findUnique({ where: { chave: 'PRECO_MUSICA_NORMAL' } }),
      prisma.configuracoes.findUnique({ where: { chave: 'PRECO_MUSICA_PRIORITARIA' } }),
    ]);

    // Validar dura√ß√£o da m√∫sica
    // TEMPO_MAXIMO_MUSICA est√° em minutos, converter para segundos
    const tempoMaximoMinutos = configTempoMaximo ? parseInt(configTempoMaximo.valor) : 8;
    const tempoMaximoSegundos = tempoMaximoMinutos * 60;
    if (musicaDuracao && musicaDuracao > tempoMaximoSegundos) {
      return res.status(400).json({
        error: `M√∫sica muito longa! O tempo m√°ximo permitido √© de ${tempoMaximoMinutos} minutos.`,
      });
    }

    const modoGratuito = configModoGratuito ? configModoGratuito.valor === 'true' : true;

    // Determinar o valor baseado na prioridade (apenas em modo pago)
    let valor;
    if (modoGratuito) {
      valor = 0; // Modo gratuito n√£o tem valor
    } else if (prioridade) {
      valor = configPrecoPrioritaria ? parseFloat(configPrecoPrioritaria.valor) : 10.0;
    } else {
      valor = configPrecoNormal ? parseFloat(configPrecoNormal.valor) : 5.0;
    }

    const pedido = await musicaService.criarPedidoMusica({
      nomeCliente,
      musicaTitulo,
      musicaYoutubeId,
      musicaThumbnail,
      musicaDuracao,
      valor,
      prioridade: prioridade || false,
      dedicatoria: dedicatoria || null,
      dedicatoriaDe: dedicatoriaDe || null,
    });

    // Se modo gratuito, processar imediatamente (sem necessidade de download)
    // M√∫sica toca direto do YouTube via iframe/player (igual modo pago)
    if (modoGratuito) {
      console.log('üíö [MODO GRATUITO] Processando pedido gratuito (sem download):', pedido.id);
      const playerService = require('../services/playerService');

      const pedidoPago = await prisma.pedidos_musica.update({
        where: { id: pedido.id },
        data: { status: 'pago' },
      });
      console.log('‚úÖ [MODO GRATUITO] Pedido marcado como pago:', pedidoPago.id);

      // Emitir evento WebSocket para atualizar fila
      const io = req.app.get('io');
      console.log('üîå [MODO GRATUITO] WebSocket io dispon√≠vel?', !!io);

      if (io) {
        const fila = await musicaService.buscarFilaMusicas();
        console.log('üìã [MODO GRATUITO] Fila atual:', fila.length, 'm√∫sicas');
        io.emit('fila:atualizada', fila);
      }

      // üéØ GARANTIR AUTOPLAY - Fun√ß√£o centralizada e robusta
      console.log('üíö [MODO GRATUITO] Garantindo autoplay...');
      try {
        const musicaIniciada = await playerService.garantirAutoplay();

        if (musicaIniciada) {
          console.log('‚úÖ [MODO GRATUITO] Autoplay garantido! M√∫sica:', musicaIniciada.musicaTitulo);
        } else {
          console.log('‚ÑπÔ∏è  [MODO GRATUITO] Autoplay n√£o necess√°rio (j√° est√° tocando ou fila vazia)');
        }
      } catch (error) {
        console.error('‚ùå [MODO GRATUITO] Erro ao garantir autoplay:', error.message);
      }

      if (io) {
        io.emit('pedido:pago', { pedidoId: pedidoPago.id });
      }

      return res.status(201).json(pedidoPago);
    }

    // Modo n√£o-gratuito: iniciar download em background
    console.log('üì• [MODO PAGO] Iniciando download em background:', musicaYoutubeId);
    downloadService.baixarVideo(musicaYoutubeId)
      .then(result => {
        if (result.cached) {
          console.log(`‚úÖ [MODO PAGO] V√≠deo ${musicaYoutubeId} j√° estava em cache`);
        } else {
          console.log(`‚úÖ [MODO PAGO] Download completo: ${musicaYoutubeId}`);
        }
      })
      .catch(error => {
        console.error(`‚ùå [MODO PAGO] Erro ao baixar v√≠deo ${musicaYoutubeId}:`, error.message);
      });

    res.status(201).json(pedido);
  } catch (error) {
    console.error('Erro ao criar pedido de m√∫sica:', error);
    res.status(400).json({ error: error.message });
  }
}

/**
 * Busca fila de m√∫sicas
 */
async function fila(req, res) {
  try {
    const musicas = await musicaService.buscarFilaMusicas();
    res.json(musicas);
  } catch (error) {
    console.error('Erro ao buscar fila de m√∫sicas:', error);
    res.status(500).json({ error: error.message });
  }
}

/**
 * Busca m√∫sica atual
 */
async function atual(req, res) {
  try {
    const musica = await musicaService.buscarMusicaAtual();
    res.json(musica);
  } catch (error) {
    console.error('Erro ao buscar m√∫sica atual:', error);
    res.status(500).json({ error: error.message });
  }
}

/**
 * Marca m√∫sica como tocando
 */
async function tocar(req, res) {
  try {
    const { id } = req.params;
    const musica = await musicaService.tocarMusica(id);

    // Emitir evento via WebSocket
    const io = req.app.get('io');
    if (io) {
      io.emit('musica:tocando', musica);
    }

    res.json(musica);
  } catch (error) {
    console.error('Erro ao tocar m√∫sica:', error);
    res.status(400).json({ error: error.message });
  }
}

/**
 * Marca m√∫sica como conclu√≠da
 */
async function concluir(req, res) {
  try {
    const { id } = req.params;
    const proximaMusica = await musicaService.concluirMusica(id);

    // Emitir eventos via WebSocket
    const io = req.app.get('io');
    if (io) {
      io.emit('musica:concluida', { id });

      if (proximaMusica) {
        io.emit('musica:tocando', proximaMusica);
      } else {
        io.emit('fila:vazia');
      }
    }

    res.json({ success: true, proximaMusica });
  } catch (error) {
    console.error('Erro ao concluir m√∫sica:', error);
    res.status(500).json({ error: error.message });
  }
}

/**
 * Pula m√∫sica atual
 */
async function pular(req, res) {
  try {
    const { id } = req.params;
    const proximaMusica = await musicaService.pularMusica(id);

    // Emitir eventos via WebSocket
    const io = req.app.get('io');
    if (io) {
      io.emit('musica:pulada', { id });

      if (proximaMusica) {
        io.emit('musica:tocando', proximaMusica);
      } else {
        io.emit('fila:vazia');
      }
    }

    res.json({ success: true, proximaMusica });
  } catch (error) {
    console.error('Erro ao pular m√∫sica:', error);
    res.status(500).json({ error: error.message });
  }
}

/**
 * Cancela pedido de m√∫sica
 */
async function cancelar(req, res) {
  try {
    const { id } = req.params;
    const pedido = await musicaService.cancelarPedido(id);

    // Emitir evento via WebSocket
    const io = req.app.get('io');
    if (io) {
      io.emit('pedido:cancelado', pedido);
    }

    res.json(pedido);
  } catch (error) {
    console.error('Erro ao cancelar pedido:', error);
    res.status(400).json({ error: error.message });
  }
}

/**
 * Busca hist√≥rico de m√∫sicas
 */
async function historico(req, res) {
  try {
    const { limite } = req.query;
    const musicas = await musicaService.buscarHistorico(parseInt(limite) || 50);
    res.json(musicas);
  } catch (error) {
    console.error('Erro ao buscar hist√≥rico:', error);
    res.status(500).json({ error: error.message });
  }
}

/**
 * Busca pedido por ID
 */
async function buscarPorId(req, res) {
  try {
    const { id } = req.params;
    const pedido = await musicaService.buscarPedidoPorId(id);
    res.json(pedido);
  } catch (error) {
    console.error('Erro ao buscar pedido:', error);
    res.status(404).json({ error: error.message });
  }
}

/**
 * Atualiza um pedido (ex: nome do cliente no modo gratuito)
 */
async function atualizarPedido(req, res) {
  try {
    const { id } = req.params;
    const { nomeCliente } = req.body;

    if (!nomeCliente || !nomeCliente.trim()) {
      return res.status(400).json({ error: 'Nome do cliente √© obrigat√≥rio' });
    }

    const prisma = require('../config/database');

    // Verificar se o pedido existe
    const pedido = await prisma.pedidos_musica.findUnique({
      where: { id }
    });

    if (!pedido) {
      return res.status(404).json({ error: 'Pedido n√£o encontrado' });
    }

    // Atualizar o nome do cliente
    const pedidoAtualizado = await prisma.pedidos_musica.update({
      where: { id },
      data: { nomeCliente: nomeCliente.trim() }
    });

    console.log(`‚úÖ Pedido ${id} atualizado com nome: ${nomeCliente.trim()}`);

    res.json(pedidoAtualizado);
  } catch (error) {
    console.error('Erro ao atualizar pedido:', error);
    res.status(500).json({ error: error.message });
  }
}

module.exports = {
  buscar,
  detalhes,
  criar,
  fila,
  atual,
  tocar,
  concluir,
  pular,
  cancelar,
  historico,
  buscarPorId,
  atualizarPedido,
};
